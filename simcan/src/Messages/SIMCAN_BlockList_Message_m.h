//
// Generated file, do not edit! Created by nedtool 4.6 from Messages/SIMCAN_BlockList_Message.msg.
//

#ifndef _SIMCAN_BLOCKLIST_MESSAGE_M_H_
#define _SIMCAN_BLOCKLIST_MESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "SIMCAN_App_IO_Message.h"
	#include "SIMCAN_File.h"					
// }}

/**
 * Class generated from <tt>Messages/SIMCAN_BlockList_Message.msg:18</tt> by nedtool.
 * <pre>
 * ///
 * /// SIMCAN Message for disk requests (branch list)
 * ///
 * message SIMCAN_BlockList_Message extends SIMCAN_App_IO_Message
 * {
 *     @customize(true);
 * 
 *     SIMCAN_File file;		// Branch list
 * }
 * </pre>
 *
 * SIMCAN_BlockList_Message_Base is only useful if it gets subclassed, and SIMCAN_BlockList_Message is derived from it.
 * The minimum code to be written for SIMCAN_BlockList_Message is the following:
 *
 * <pre>
 * class SIMCAN_BlockList_Message : public SIMCAN_BlockList_Message_Base
 * {
 *   private:
 *     void copy(const SIMCAN_BlockList_Message& other) { ... }

 *   public:
 *     SIMCAN_BlockList_Message(const char *name=NULL, int kind=0) : SIMCAN_BlockList_Message_Base(name,kind) {}
 *     SIMCAN_BlockList_Message(const SIMCAN_BlockList_Message& other) : SIMCAN_BlockList_Message_Base(other) {copy(other);}
 *     SIMCAN_BlockList_Message& operator=(const SIMCAN_BlockList_Message& other) {if (this==&other) return *this; SIMCAN_BlockList_Message_Base::operator=(other); copy(other); return *this;}
 *     virtual SIMCAN_BlockList_Message *dup() const {return new SIMCAN_BlockList_Message(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from SIMCAN_BlockList_Message_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(SIMCAN_BlockList_Message);
 * </pre>
 */
class SIMCAN_BlockList_Message_Base : public ::SIMCAN_App_IO_Message
{
  protected:
    SIMCAN_File file_var;

  private:
    void copy(const SIMCAN_BlockList_Message_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SIMCAN_BlockList_Message_Base&);
    // make constructors protected to avoid instantiation
    SIMCAN_BlockList_Message_Base(const char *name=NULL, int kind=0);
    SIMCAN_BlockList_Message_Base(const SIMCAN_BlockList_Message_Base& other);
    // make assignment operator protected to force the user override it
    SIMCAN_BlockList_Message_Base& operator=(const SIMCAN_BlockList_Message_Base& other);

  public:
    virtual ~SIMCAN_BlockList_Message_Base();
    virtual SIMCAN_BlockList_Message_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class SIMCAN_BlockList_Message");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual SIMCAN_File& getFile();
    virtual const SIMCAN_File& getFile() const {return const_cast<SIMCAN_BlockList_Message_Base*>(this)->getFile();}
    virtual void setFile(const SIMCAN_File& file);
};


#endif // ifndef _SIMCAN_BLOCKLIST_MESSAGE_M_H_

