//
// Generated file, do not edit! Created by nedtool 4.6 from Messages/SIMCAN_App_NET_Message.msg.
//

#ifndef _SIMCAN_APP_NET_MESSAGE_M_H_
#define _SIMCAN_APP_NET_MESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "SIMCAN_Message.h"
			
// }}

/**
 * Class generated from <tt>Messages/SIMCAN_App_NET_Message.msg:15</tt> by nedtool.
 * <pre>
 * ///
 * /// SIMCAN Message for NET requests
 * ///
 * message SIMCAN_App_NET_Message extends SIMCAN_Message
 * {
 *     @customize(true);
 * 
 *     string destinationIP = "";		// Destination IP
 *     string localIP = "";			// Local IP
 *     int destinationPort = 0;		// Destination port
 *     int localPort = 0;				// Local port   
 *     unsigned int size = 0;          // Request size
 *     string data = "";          		// Data sended
 * }
 * </pre>
 *
 * SIMCAN_App_NET_Message_Base is only useful if it gets subclassed, and SIMCAN_App_NET_Message is derived from it.
 * The minimum code to be written for SIMCAN_App_NET_Message is the following:
 *
 * <pre>
 * class SIMCAN_App_NET_Message : public SIMCAN_App_NET_Message_Base
 * {
 *   private:
 *     void copy(const SIMCAN_App_NET_Message& other) { ... }

 *   public:
 *     SIMCAN_App_NET_Message(const char *name=NULL, int kind=0) : SIMCAN_App_NET_Message_Base(name,kind) {}
 *     SIMCAN_App_NET_Message(const SIMCAN_App_NET_Message& other) : SIMCAN_App_NET_Message_Base(other) {copy(other);}
 *     SIMCAN_App_NET_Message& operator=(const SIMCAN_App_NET_Message& other) {if (this==&other) return *this; SIMCAN_App_NET_Message_Base::operator=(other); copy(other); return *this;}
 *     virtual SIMCAN_App_NET_Message *dup() const {return new SIMCAN_App_NET_Message(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from SIMCAN_App_NET_Message_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(SIMCAN_App_NET_Message);
 * </pre>
 */
class SIMCAN_App_NET_Message_Base : public ::SIMCAN_Message
{
  protected:
    opp_string destinationIP_var;
    opp_string localIP_var;
    int destinationPort_var;
    int localPort_var;
    unsigned int size_var;
    opp_string data_var;

  private:
    void copy(const SIMCAN_App_NET_Message_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SIMCAN_App_NET_Message_Base&);
    // make constructors protected to avoid instantiation
    SIMCAN_App_NET_Message_Base(const char *name=NULL, int kind=0);
    SIMCAN_App_NET_Message_Base(const SIMCAN_App_NET_Message_Base& other);
    // make assignment operator protected to force the user override it
    SIMCAN_App_NET_Message_Base& operator=(const SIMCAN_App_NET_Message_Base& other);

  public:
    virtual ~SIMCAN_App_NET_Message_Base();
    virtual SIMCAN_App_NET_Message_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class SIMCAN_App_NET_Message");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getDestinationIP() const;
    virtual void setDestinationIP(const char * destinationIP);
    virtual const char * getLocalIP() const;
    virtual void setLocalIP(const char * localIP);
    virtual int getDestinationPort() const;
    virtual void setDestinationPort(int destinationPort);
    virtual int getLocalPort() const;
    virtual void setLocalPort(int localPort);
    virtual unsigned int getSize() const;
    virtual void setSize(unsigned int size);
    virtual const char * getData() const;
    virtual void setData(const char * data);
};


#endif // ifndef _SIMCAN_APP_NET_MESSAGE_M_H_

